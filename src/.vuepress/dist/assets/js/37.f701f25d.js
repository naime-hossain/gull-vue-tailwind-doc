(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{420:function(t,e,a){"use strict";a.r(e);var s=a(50),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"using-fragments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-fragments"}},[t._v("#")]),t._v(" Using fragments")]),t._v(" "),a("p",[t._v("A "),a("a",{attrs:{href:"http://graphql.org/learn/queries/#fragments",target:"_blank",rel:"noopener noreferrer"}},[t._v("GraphQL fragment"),a("OutboundLink")],1),t._v(" is a shared piece of query logic.")]),t._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fragment")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token fragment function"}},[t._v("NameParts")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("firstName")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("lastName")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("query")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token definition-query function"}},[t._v("GetPerson")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property-query"}},[t._v("people")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"7"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token fragment function"}},[t._v("NameParts")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property-query"}},[t._v("avatar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LARGE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("It's important to note that the component after the "),a("code",[t._v("on")]),t._v(" clause is designated for the type we are selecting from. In this case, "),a("code",[t._v("people")]),t._v(" is of type "),a("code",[t._v("Person")]),t._v(" and we want to select the "),a("code",[t._v("firstName")]),t._v(" and "),a("code",[t._v("lastName")]),t._v(" fields from "),a("code",[t._v('people(id: "7")')]),t._v(".")]),t._v(" "),a("p",[t._v("There are two principal uses for fragments in Apollo:")]),t._v(" "),a("ul",[a("li",[t._v("Sharing fields between multiple queries, mutations or subscriptions.")]),t._v(" "),a("li",[t._v("Breaking your queries up to allow you to co-locate field access with the places they are used.")])]),t._v(" "),a("p",[t._v("In this document we'll outline patterns to do both; we'll also make use of utilities in the "),a("a",{attrs:{href:"https://github.com/apollographql/apollo-client/tree/master/packages/graphql-anywhere",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("graphql-anywhere")]),a("OutboundLink")],1),t._v(" and "),a("a",{attrs:{href:"https://github.com/apollographql/graphql-tag",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("graphql-tag")]),a("OutboundLink")],1),t._v(" packages which aim to help us, especially with the second problem.")]),t._v(" "),a("h2",{attrs:{id:"reusing-fragments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reusing-fragments"}},[t._v("#")]),t._v(" Reusing fragments")]),t._v(" "),a("p",[t._v("The most straightforward use of fragments is to reuse parts of queries (or mutations or subscriptions) in various parts of your application. For instance, in GitHunt on the comments page, we want to fetch the same fields after posting a comment as we originally query. This way we can be sure that we render consistent comment objects as the data changes.")]),t._v(" "),a("p",[t._v("To do so, we can simply share a fragment describing the fields we need for a comment:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" gql "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'graphql-tag'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" commentFragment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  comment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" gql"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    fragment CommentsPageComment on Comment {\n      id\n      postedBy {\n        login\n        htmlUrl\n      }\n      createdAt\n      content\n    }\n  ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("This can be done either in our component "),a("code",[t._v("<script>")]),t._v(" section or in a sibling "),a("code",[t._v("fragments.js")]),t._v(" file by convention.")]),t._v(" "),a("p",[t._v("When it's time to embed the fragment in a query, we simply use the "),a("code",[t._v("...Name")]),t._v(" syntax in our GraphQL document, and embed the fragment inside our query GraphQL document:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SUBMIT_COMMENT_MUTATION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gql"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  mutation SubmitComment($repoFullName: String!, $commentContent: String!) {\n    submitComment(repoFullName: $repoFullName, commentContent: $commentContent) {\n      ...CommentsPageComment\n    }\n  }\n  ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("commentFragment"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COMMENT_QUERY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gql"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  query Comment($repoName: String!) {\n    # ...\n    entry(repoFullName: $repoName) {\n      # ...\n      comments {\n        ...CommentsPageComment\n      }\n      # ...\n    }\n  }\n  ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("commentFragment"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),a("p",[t._v("You can see the full source code to the "),a("code",[t._v("CommentsPage")]),t._v(" in GitHunt "),a("a",{attrs:{href:"https://github.com/apollographql/GitHunt-React/blob/master/src/routes/CommentsPage.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"colocating-fragments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#colocating-fragments"}},[t._v("#")]),t._v(" Colocating fragments")]),t._v(" "),a("p",[t._v("A key advantage of GraphQL is the tree-like nature of the response data, which in many cases mirrors your rendered component hierarchy. This, combined with GraphQL's support for fragments, allows you to split your queries up in such a way that the various fields fetched by the queries are located right alongside the code that uses the field.")]),t._v(" "),a("p",[t._v("Although this technique doesn't always make sense (for instance it's not always the case that the GraphQL schema is driven by the UI requirements), when it does, it's possible to use some patterns in Apollo client to take full advantage of it.")]),t._v(" "),a("p",[t._v("In GitHunt, we show an example of this on the "),a("a",{attrs:{href:"https://github.com/apollographql/GitHunt-React/blob/master/src/routes/FeedPage.js",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("FeedPage")]),a("OutboundLink")],1),t._v(", which constructs the following view hierarchy:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("FeedPage\n└── Feed\n    └── FeedEntry\n        ├── RepoInfo\n        └── VoteButtons\n")])])]),a("p",[t._v("The "),a("code",[t._v("FeedPage")]),t._v(" conducts a query to fetch a list of "),a("code",[t._v("Entry")]),t._v("s, and each of the subcomponents requires different subfields of each "),a("code",[t._v("Entry")]),t._v(".")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("graphql-anywhere")]),t._v(" package gives us tools to easily construct a single query that provides all the fields that each subcomponent needs, and allows to easily pass the exact field that a component needs to it.")]),t._v(" "),a("h3",{attrs:{id:"creating-fragments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-fragments"}},[t._v("#")]),t._v(" Creating fragments")]),t._v(" "),a("p",[t._v("To create the fragments, we again use the "),a("code",[t._v("gql")]),t._v(" helper, for example:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// VueButtons.vue")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" entryFragment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gql"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  fragment VoteButtons on Entry {\n    score\n    vote {\n      voteValue\n    }\n  }\n")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),a("p",[t._v("If our fragments include sub-fragments then we can pass them into the "),a("code",[t._v("gql")]),t._v(" helper:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" entryFragment "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" VoteButtonsEntryFragment "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./VoteButtons.vue'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" entryFragment "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" RepoInfoEntryFragment "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./RepoInfo.vue'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" entryFragment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gql"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  fragment FeedEntry on Entry {\n    commentCount\n    repository {\n      fullName\n      htmlUrl\n      owner {\n        avatarUrl\n      }\n    }\n    ...VoteButtons\n    ...RepoInfo\n  }\n  ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("VoteButtonsEntryFragment"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("RepoInfoEntryFragment"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),a("h3",{attrs:{id:"filtering-with-fragments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filtering-with-fragments"}},[t._v("#")]),t._v(" Filtering with fragments")]),t._v(" "),a("p",[t._v("We can also use the "),a("code",[t._v("graphql-anywhere")]),t._v(" package to filter the exact fields from the "),a("code",[t._v("entry")]),t._v(" before passing them to the subcomponent. So when we render a "),a("code",[t._v("VoteButtons.vue")]),t._v(", we can simply do:")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" filter "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'graphql-anywhere'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" entryFragment "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" VoteButtonsEntryFragment "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./VoteButtons.vue'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    entry"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("filterVoteButtonEntry")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("entry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VoteButtonsEntryFragment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("VoteButtons")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":entry")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("filterVoteButtonEntry(entry)"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("The "),a("code",[t._v("filter()")]),t._v(" function will grab exactly the fields from the "),a("code",[t._v("entry")]),t._v(" that the fragment defines.")]),t._v(" "),a("h3",{attrs:{id:"importing-fragments-when-using-webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#importing-fragments-when-using-webpack"}},[t._v("#")]),t._v(" Importing fragments when using Webpack")]),t._v(" "),a("p",[t._v("When loading "),a("code",[t._v(".graphql")]),t._v(" files with "),a("a",{attrs:{href:"https://github.com/apollographql/graphql-tag/blob/master/loader.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("graphql-tag/loader"),a("OutboundLink")],1),t._v(", we can include fragments using "),a("code",[t._v("import")]),t._v(" statements. For example:")]),t._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#import "./someFragment.graphql"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("query")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token definition-query function"}},[t._v("getSomething")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token object"}},[t._v("something")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token fragment function"}},[t._v("SomethingFragment")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Will make the contents of "),a("code",[t._v("someFragment.graphql")]),t._v(" available to the current file. See the "),a("RouterLink",{attrs:{to:"/integrations/webpack/#fragments"}},[t._v("Webpack Fragments")]),t._v(" section for additional details.")],1),t._v(" "),a("h2",{attrs:{id:"fragments-on-unions-and-interfaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fragments-on-unions-and-interfaces"}},[t._v("#")]),t._v(" Fragments on unions and interfaces")]),t._v(" "),a("p",[t._v("By default, Apollo Client doesn't require any knowledge of the GraphQL schema, which means it's very easy to set up and works with any server and supports even the largest schemas. However, as your usage of Apollo and GraphQL becomes more sophisticated, you may start using fragments on interfaces or unions. Here's an example of a query that uses fragments on an interface:")]),t._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("query")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token object"}},[t._v("allPeople")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("name")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Jedi")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("side")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Droid")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("model")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("In the query above, "),a("code",[t._v("allPeople")]),t._v(" returns a result of type "),a("code",[t._v("Character[]")]),t._v(". Both "),a("code",[t._v("Jedi")]),t._v(" and "),a("code",[t._v("Droid")]),t._v(" are possible concrete types of "),a("code",[t._v("Character")]),t._v(", but on the client there is no way to know that without having some information about the schema. By default, Apollo Client's cache will use a heuristic fragment matcher, which assumes that a fragment matched if the result included all the fields in its selection set, and didn't match when any field was missing. This works in most cases, but it also means that Apollo Client cannot check the server response for you, and it cannot tell you when you're manually writing invalid data into the store using "),a("code",[t._v("update")]),t._v(", "),a("code",[t._v("updateQuery")]),t._v(", "),a("code",[t._v("writeQuery")]),t._v(", etc. To inform the cache store about these polymorphic relationships, you need to pass "),a("code",[t._v("possibleTypes")]),t._v(" option to "),a("code",[t._v("InMemoryCache")]),t._v(" below.")]),t._v(" "),a("p",[t._v("The section below explains how to pass the necessary schema knowledge to the Apollo Client cache so unions and interfaces can be accurately matched and results validated before writing them into the store.")]),t._v(" "),a("p",[t._v("We recommend setting up a build step that extracts the necessary information from the schema into a JSON file, where it can be imported from when constructing the cache. To set it up, follow the steps below:")]),t._v(" "),a("ol",[a("li",[t._v("Query your server / schema to obtain the necessary information about unions and interfaces and write it to a file.")])]),t._v(" "),a("p",[t._v("Read the documentation about how to "),a("a",{attrs:{href:"https://www.apollographql.com/docs/react/data/fragments/#generating-possibletypes-automatically",target:"_blank",rel:"noopener noreferrer"}},[t._v("extract possibleTypes automatically"),a("OutboundLink")],1),t._v(" using an introspection query. Or use the plugin "),a("a",{attrs:{href:"https://graphql-code-generator.com/docs/plugins/fragment-matcher",target:"_blank",rel:"noopener noreferrer"}},[t._v("fragment-matcher"),a("OutboundLink")],1),t._v(" for graphql-codegen and configure it for "),a("a",{attrs:{href:"https://graphql-code-generator.com/docs/plugins/fragment-matcher#usage-with-apollo-client-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("apollo client 3"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("Use "),a("code",[t._v("possibleTypes.json")]),t._v(" to configure your cache during construction. Then, you pass your newly configured cache to "),a("code",[t._v("ApolloClient")]),t._v(" to complete the process.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ApolloClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" InMemoryCache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" createHttpLink "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@apollo/client/core'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" possibleTypes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./possibleTypes.json'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cache "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InMemoryCache")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" possibleTypes "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" httpLink "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHttpLink")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" uri "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApolloClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  link"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" httpLink"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);